//Fibonacci through recursive function

00000001	//User input
11101000	//stack push r0
00001001	//Load 8 bit into r1
00001000	//8

11100001	//jump to 8
11101100	//stack pull r0
11100100	//display r0
00000011	//halt

11101100	//stack pull r0
11111001	//load immediate r2 1
11111110	//load immediate r3 2
10001011	//if r0>=r3 branch 24

10000010	//if r0>=r2 branch 16
11110100	//load immediate r1 0
11101001	//stack push r1
00000010	//return

11101010	//stack push r2
00000010	//return
0
0

0
0
0
0

01000001	//r0 = r0-1
11101000	//stack push r0
11101000	//stack push r0
00001001	//Load 8 bit into r1

00001000	//8
11100001	//jump to 8
11101101	//stack pull r1
11101100	//stack pull r0

01000001	//r0 = r0-1
11101001	//stack push r1
11101000	//stack push r0
00001001	//Load 8 bit into r1

00001000	//8
11100001	//jump to 8
11101110	//stack pull r2
11101101	//stack pull r1

00010110	//add r1 r2
11101000	//stack push r0
00000010	//return
0

w1 <= 32'b00001000_00001001_11101000_00000001;
w2 <= 32'b00000011_11100100_11101100_11100001;
w3 <= 32'b10001011_11111110_11111001_11101100;
w4 <= 32'b00000010_11101001_11110100_10000010;
w5 <= 32'b00000000_00000000_00000010_11101010;
w6 <= 32'b00000000_00000000_00000000_00000000;
w7 <= 32'b00001001_11101000_11101000_01000001;
w8 <= 32'b11101100_11101101_11100001_00001000;
w9 <= 32'b00001001_11101000_11101001_01000001;
w10<= 32'b11101101_11101110_11100001_00001000;
w11<= 32'b00000000_00000010_11101000_00010110;


//Another program


00000001
10101000	//r2=n
11111101	//r3=1
11110001	//r0=1

0
0
0
10110010	//swap r0 r2


10110010	//swap r0 r2
01010011	//r0=r0*r3
00101101	//r3 = r3 + 1
10110010	//swap r0 r2

10001001	// if r0>=r3 jump to line 8
11100110  	//display r2

00000011
0

//factorial n

w1<=32'b11110001_11111101_10101000_00000001;
w2<=32'b10110010_00000000_00000000_00000000;
w3<=32'b10110010_00101101_01010011_10110010;
w4<=32'b00000000_00000011_11100110_10001001;

//sum to n numbers

w1<=32'b11110000_11111101_10101000_00000001;
w2<=32'b10110010_00000000_00000000_00000000;
w3<=32'b10110010_00101101_00010011_10110010;
w4<=32'b00000000_00000011_11100110_10001001;


11111101 	//r3=1
00000001	//r0=n
10100100	//r1=n
11100100

00000001	//r0=up/down
10001010	//if up then send to 2*8
11111101 	//r3=1
0


11100101	//print r1
00001101	//sleep for 1 sec
01000101	//r1 = r1-1
10011001	//branch r1>=r3

01000101
00000011
0
0



11100111	//print r3
00001101	//sleep for 1 sec
00101101	//r3++
10011010	//branch

00000011
0
0
0


//timer
w1 <= 32'b11100100_10100100_00000001_11111101;
w2 <= 32'b00000000_11111101_10001010_00000001;
w3 <= 32'b10011001_01000101_00001101_11100101;
w4 <= 32'b00000000_00000000_00000011_01000101;
w5 <= 32'b10011010_00101101_00001101_11100111;
w6 <= 32'b00000000_00000000_00000000_00000011;

11110001	//r0=1



11110011
11111001
10000010
11100100

000000011
0

0

0

11100110
00000011
0

w1 <= 32'b11100100_10000010_11111001_11110011;
w2 <= 32'b000000000000000000000000_00000011;
w3 <= 32'd0;
w4 <= 32'd0;
w5 <= 32'b00000000_00000000_00000011_11100110;


